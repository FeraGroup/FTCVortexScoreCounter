/*
 * FIRST Tech Challenge Vortex Counter
 * Created by Alexander Fera
 * Fera Group
 * Novi, MI 48377{licensePrefix}
 */
package ftc.goal.counter;

import static ftc.goal.counter.GoalCounterUI.AudDisp1024;
import static ftc.goal.counter.GoalCounterUI.isFullscreen;
import javax.swing.JFrame;
import static ftc.goal.counter.GoalCounterUI.AudDisp1080;
import static ftc.goal.counter.GoalCounterUI.AudDisp1366;
import static ftc.goal.counter.GoalCounterUI.AudDisp1600;
import static ftc.goal.counter.GoalCounterUI.AudDisp720;
import static ftc.goal.counter.GoalCounterUI.AudDisp800;

/**
 *
 * @author afera
 */
public class SettingsUI extends javax.swing.JFrame {
    
    public static boolean RedCenBtn = true;
    public static boolean RedCenLeft = false;
    public static boolean RedCenRight = false;
    public static boolean RedCorBtn = true;
    public static boolean RedCorLeft = false;
    public static boolean RedCorRight = false;
    public static boolean BlueCenBtn = true;
    public static boolean BlueCenLeft = false;
    public static boolean BlueCenRight = false;
    public static boolean BlueCorBtn = true;
    public static boolean BlueCorLeft = false;
    public static boolean BlueCorRight = false;
    public static boolean RedCen = true;
    public static boolean RedCor = false;
    public static boolean BlueCen = false;
    public static boolean BlueCor = false;
    public static boolean ModeChange = true;
    public static int AudDispOpen = 2;
    
    /**
     * Creates new form SettingsUI
     */
    public SettingsUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        red = new javax.swing.JPanel();
        RedCenControlSelect = new javax.swing.JComboBox();
        RedCenContButton = new javax.swing.JCheckBox();
        RedCenContLeft = new javax.swing.JCheckBox();
        RedCenContRight = new javax.swing.JCheckBox();
        CenVor = new javax.swing.JLabel();
        RedCorControlSelect = new javax.swing.JComboBox();
        RedCorContRight = new javax.swing.JCheckBox();
        RedCorContLeft = new javax.swing.JCheckBox();
        RedCorContButton = new javax.swing.JCheckBox();
        CorVor = new javax.swing.JLabel();
        blue = new javax.swing.JPanel();
        BlueCenControlSelect = new javax.swing.JComboBox();
        BlueCenContButton = new javax.swing.JCheckBox();
        BlueCenContLeft = new javax.swing.JCheckBox();
        BlueCenContRight = new javax.swing.JCheckBox();
        BCenVor = new javax.swing.JLabel();
        BlueCorControlSelect = new javax.swing.JComboBox();
        BlueCorContRight = new javax.swing.JCheckBox();
        BlueCorContLeft = new javax.swing.JCheckBox();
        BlueCorContButton = new javax.swing.JCheckBox();
        BCorVor = new javax.swing.JLabel();
        Save = new javax.swing.JButton();
        RePullJS = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        TimerControlSelect = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        Mode = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        toggleFullscreen = new javax.swing.JButton();

        setTitle("Settings");
        setResizable(false);

        red.setBackground(new java.awt.Color(237, 28, 36));
        red.setBorder(javax.swing.BorderFactory.createTitledBorder("Red Alliance"));

        RedCenControlSelect.setName(""); // NOI18N
        RedCenControlSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedCenControlSelectActionPerformed(evt);
            }
        });

        RedCenContButton.setSelected(true);
        RedCenContButton.setText("Button Pad");
        RedCenContButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedCenContButtonActionPerformed(evt);
            }
        });

        RedCenContLeft.setText("Left Trigger");
        RedCenContLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedCenContLeftActionPerformed(evt);
            }
        });

        RedCenContRight.setText("Right Trigger");
        RedCenContRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedCenContRightActionPerformed(evt);
            }
        });

        CenVor.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        CenVor.setText("Center Vortex");

        RedCorControlSelect.setName(""); // NOI18N
        RedCorControlSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedCorControlSelectActionPerformed(evt);
            }
        });

        RedCorContRight.setText("Right Trigger");
        RedCorContRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedCorContRightActionPerformed(evt);
            }
        });

        RedCorContLeft.setText("Left Trigger");
        RedCorContLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedCorContLeftActionPerformed(evt);
            }
        });

        RedCorContButton.setSelected(true);
        RedCorContButton.setText("Button Pad");
        RedCorContButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedCorContButtonActionPerformed(evt);
            }
        });

        CorVor.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        CorVor.setText("Corner Vortex");

        javax.swing.GroupLayout redLayout = new javax.swing.GroupLayout(red);
        red.setLayout(redLayout);
        redLayout.setHorizontalGroup(
            redLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(redLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(redLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(redLayout.createSequentialGroup()
                        .addGroup(redLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(redLayout.createSequentialGroup()
                                .addComponent(RedCenContButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(RedCenContLeft)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(RedCenContRight))
                            .addGroup(redLayout.createSequentialGroup()
                                .addComponent(RedCorContButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(RedCorContLeft)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(RedCorContRight)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(redLayout.createSequentialGroup()
                        .addGroup(redLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RedCenControlSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CenVor)
                            .addComponent(CorVor)
                            .addComponent(RedCorControlSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        redLayout.setVerticalGroup(
            redLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(redLayout.createSequentialGroup()
                .addComponent(CenVor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RedCenControlSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(redLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RedCenContButton)
                    .addComponent(RedCenContLeft)
                    .addComponent(RedCenContRight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CorVor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RedCorControlSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(redLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RedCorContButton)
                    .addComponent(RedCorContLeft)
                    .addComponent(RedCorContRight))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        blue.setBackground(new java.awt.Color(0, 101, 179));
        blue.setBorder(javax.swing.BorderFactory.createTitledBorder("Blue Alliance"));

        BlueCenControlSelect.setName(""); // NOI18N
        BlueCenControlSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlueCenControlSelectActionPerformed(evt);
            }
        });

        BlueCenContButton.setSelected(true);
        BlueCenContButton.setText("Button Pad");
        BlueCenContButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlueCenContButtonActionPerformed(evt);
            }
        });

        BlueCenContLeft.setText("Left Trigger");
        BlueCenContLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlueCenContLeftActionPerformed(evt);
            }
        });

        BlueCenContRight.setText("Right Trigger");
        BlueCenContRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlueCenContRightActionPerformed(evt);
            }
        });

        BCenVor.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        BCenVor.setText("Center Vortex");

        BlueCorControlSelect.setName(""); // NOI18N
        BlueCorControlSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlueCorControlSelectActionPerformed(evt);
            }
        });

        BlueCorContRight.setText("Right Trigger");
        BlueCorContRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlueCorContRightActionPerformed(evt);
            }
        });

        BlueCorContLeft.setText("Left Trigger");
        BlueCorContLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlueCorContLeftActionPerformed(evt);
            }
        });

        BlueCorContButton.setSelected(true);
        BlueCorContButton.setText("Button Pad");
        BlueCorContButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlueCorContButtonActionPerformed(evt);
            }
        });

        BCorVor.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        BCorVor.setText("Corner Vortex");

        javax.swing.GroupLayout blueLayout = new javax.swing.GroupLayout(blue);
        blue.setLayout(blueLayout);
        blueLayout.setHorizontalGroup(
            blueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blueLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(blueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(blueLayout.createSequentialGroup()
                        .addGroup(blueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BlueCenControlSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BCenVor))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(blueLayout.createSequentialGroup()
                        .addGroup(blueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(blueLayout.createSequentialGroup()
                                .addComponent(BlueCorContButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BlueCorContLeft)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BlueCorContRight))
                            .addGroup(blueLayout.createSequentialGroup()
                                .addComponent(BlueCenContButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BlueCenContLeft)
                                .addGap(4, 4, 4)
                                .addComponent(BlueCenContRight))
                            .addGroup(blueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, blueLayout.createSequentialGroup()
                                    .addComponent(BCorVor)
                                    .addGap(229, 229, 229))
                                .addComponent(BlueCorControlSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        blueLayout.setVerticalGroup(
            blueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blueLayout.createSequentialGroup()
                .addComponent(BCenVor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BlueCenControlSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(blueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BlueCenContButton)
                    .addComponent(BlueCenContLeft)
                    .addComponent(BlueCenContRight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BCorVor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BlueCorControlSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(blueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BlueCorContButton)
                    .addComponent(BlueCorContLeft)
                    .addComponent(BlueCorContRight))
                .addContainerGap())
        );

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        RePullJS.setText("Re-Pull Joysticks");
        RePullJS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RePullJSActionPerformed(evt);
            }
        });

        jComboBox1.setMaximumRowCount(6);
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1920 X 1080", "1600 x 1200", "720 X 1080", "1366 x 768", "1024 x 768", "800 x 600" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        TimerControlSelect.setName(""); // NOI18N
        TimerControlSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimerControlSelectActionPerformed(evt);
            }
        });

        jLabel1.setText("Timer Controller");

        Mode.setSelected(true);
        Mode.setText("Mode Change (X)");
        Mode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModeActionPerformed(evt);
            }
        });

        jLabel2.setText("Audience Display Controls");

        toggleFullscreen.setText("Toggle Fullscreen");
        toggleFullscreen.setEnabled(false);
        toggleFullscreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleFullscreenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(red, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(blue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 1, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(RePullJS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Save))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(TimerControlSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Mode))
                            .addComponent(jLabel1))
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(34, 34, 34))
                            .addComponent(toggleFullscreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(blue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(red, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TimerControlSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Mode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(toggleFullscreen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RePullJS)
                    .addComponent(Save))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RedCenControlSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedCenControlSelectActionPerformed
        
    }//GEN-LAST:event_RedCenControlSelectActionPerformed

    private void RedCenContButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedCenContButtonActionPerformed
     if(RedCenContButton.isSelected()){
         RedCenBtn = true;
                 }
     else{
         RedCenBtn = false;
     }
    }//GEN-LAST:event_RedCenContButtonActionPerformed

    private void RedCenContLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedCenContLeftActionPerformed
     if(RedCenContLeft.isSelected()){
         RedCenLeft = true;
                 }
     else{
         RedCenLeft = false;
     }  
    }//GEN-LAST:event_RedCenContLeftActionPerformed

    private void RedCorControlSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedCorControlSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RedCorControlSelectActionPerformed

    private void RedCorContButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedCorContButtonActionPerformed
     if(RedCorContButton.isSelected()){
         RedCorBtn = true;
                 }
     else{
         RedCorBtn = false;
     }
    }//GEN-LAST:event_RedCorContButtonActionPerformed

    private void RedCorContLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedCorContLeftActionPerformed
     if(RedCorContLeft.isSelected()){
         RedCorLeft = true;
                 }
     else{
         RedCorLeft = false;
     }  
    }//GEN-LAST:event_RedCorContLeftActionPerformed

    private void BlueCenControlSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlueCenControlSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BlueCenControlSelectActionPerformed

    private void BlueCenContButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlueCenContButtonActionPerformed
     if(BlueCenContButton.isSelected()){
         BlueCenBtn = true;
                 }
     else{
         BlueCenBtn = false;
     }
    }//GEN-LAST:event_BlueCenContButtonActionPerformed

    private void BlueCenContLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlueCenContLeftActionPerformed
     if(BlueCenContLeft.isSelected()){
         BlueCenLeft = true;
                 }
     else{
         BlueCenLeft = false;
     } 
    }//GEN-LAST:event_BlueCenContLeftActionPerformed

    private void BlueCorControlSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlueCorControlSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BlueCorControlSelectActionPerformed

    private void BlueCorContLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlueCorContLeftActionPerformed
     if(BlueCorContLeft.isSelected()){
         BlueCorLeft = true;
                 }
     else{
         BlueCorLeft = false;
     }
    }//GEN-LAST:event_BlueCorContLeftActionPerformed

    private void BlueCorContButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlueCorContButtonActionPerformed
     if(BlueCorContButton.isSelected()){
         BlueCorBtn = true;
                 }
     else{
         BlueCorBtn = false;
     }
    }//GEN-LAST:event_BlueCorContButtonActionPerformed

    private void RedCenContRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedCenContRightActionPerformed
     if(RedCenContRight.isSelected()){
         RedCenRight = true;
                 }
     else{
         RedCenRight = false;
     }
    }//GEN-LAST:event_RedCenContRightActionPerformed

    private void BlueCenContRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlueCenContRightActionPerformed
     if(BlueCenContRight.isSelected()){
         BlueCenRight = true;
                 }
     else{
         BlueCenRight = false;
     }
    }//GEN-LAST:event_BlueCenContRightActionPerformed

    private void RedCorContRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedCorContRightActionPerformed
     if(RedCorContRight.isSelected()){
         RedCorRight = true;
                 }
     else{
         RedCorRight = false;
     }
    }//GEN-LAST:event_RedCorContRightActionPerformed

    private void BlueCorContRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlueCorContRightActionPerformed
     if(BlueCorContRight.isSelected()){
         BlueCorRight = true;
                 }
     else{
         BlueCorRight = false;
     }
    }//GEN-LAST:event_BlueCorContRightActionPerformed

    private void RePullJSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RePullJSActionPerformed
        RedCenControlSelect.removeAllItems();
        BlueCenControlSelect.removeAllItems();
        RedCorControlSelect.removeAllItems();
        BlueCorControlSelect.removeAllItems();
        JoystickTest.foundControllers.clear();
        JoystickTest.searchForControllers();
    }//GEN-LAST:event_RePullJSActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
         this.setVisible(false);
    }//GEN-LAST:event_SaveActionPerformed

    private void TimerControlSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimerControlSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TimerControlSelectActionPerformed

    private void ModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModeActionPerformed
     if(Mode.isSelected()){
         ModeChange = true;
                 }
     else{
         ModeChange = false;
     }
    }//GEN-LAST:event_ModeActionPerformed

    private void toggleFullscreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleFullscreenActionPerformed
       if(SettingsUI.AudDispOpen == 1){//
           if(AudDisp1600.isVisible()){
                if(isFullscreen == false){
                     AudDisp1600.dispose();
                     AudDisp1600.setExtendedState(JFrame.MAXIMIZED_BOTH);
                     AudDisp1600.setUndecorated(true);
                     AudDisp1600.setResizable(false);
                     AudDisp1600.setVisible(true);
                     isFullscreen = true;
                     SettingsUI.toggleFullscreen.setEnabled(true);
                }else{
                    AudDisp1080.dispose();
                    AudDisp1080.setUndecorated(false);
                    AudDisp1080.setResizable(true);
                    AudDisp1080.setVisible(true);
                    SettingsUI.toggleFullscreen.setEnabled(true);
                    isFullscreen = false;
                }         
            }else if(SettingsUI.AudDispOpen == 3){
                if(AudDisp1366.isVisible()){
                    if(isFullscreen == false){
                         AudDisp1366.dispose();
                         AudDisp1366.setExtendedState(JFrame.MAXIMIZED_BOTH);
                         AudDisp1366.setUndecorated(true);
                         AudDisp1366.setResizable(false);
                         AudDisp1366.setVisible(true);
                         isFullscreen = true;
                         SettingsUI.toggleFullscreen.setEnabled(true);
                    }else{
                        AudDisp1366.dispose();
                        AudDisp1366.setUndecorated(false);
                        AudDisp1366.setResizable(true);
                        AudDisp1366.setVisible(true);
                        SettingsUI.toggleFullscreen.setEnabled(true);
                        isFullscreen = false;
                    }         
                }
            }else if(SettingsUI.AudDispOpen == 0){
                if(AudDisp1080.isVisible()){
                    if(isFullscreen == false){
                         AudDisp1080.dispose();
                         AudDisp1080.setExtendedState(JFrame.MAXIMIZED_BOTH);
                         AudDisp1080.setUndecorated(true);
                         AudDisp1080.setResizable(false);
                         AudDisp1080.setVisible(true);
                         isFullscreen = true;
                         SettingsUI.toggleFullscreen.setEnabled(true);
                    }else{
                        AudDisp1080.dispose();
                        AudDisp1080.setUndecorated(false);
                        AudDisp1080.setResizable(true);
                        AudDisp1080.setVisible(true);
                        SettingsUI.toggleFullscreen.setEnabled(true);
                        isFullscreen = false;
                    }         
                 }
            }else if(SettingsUI.AudDispOpen == 4){
                if(AudDisp1024.isVisible()){
                    if(isFullscreen == false){
                         AudDisp1024.dispose();
                         AudDisp1024.setExtendedState(JFrame.MAXIMIZED_BOTH);
                         AudDisp1024.setUndecorated(true);
                         AudDisp1024.setResizable(false);
                         AudDisp1024.setVisible(true);
                         isFullscreen = true;
                         SettingsUI.toggleFullscreen.setEnabled(true);
                    }else{
                        AudDisp1024.dispose();
                        AudDisp1024.setUndecorated(false);
                        AudDisp1024.setResizable(true);
                        AudDisp1024.setVisible(true);
                        SettingsUI.toggleFullscreen.setEnabled(true);
                        isFullscreen = false;
                    }         
                }
            }else if(SettingsUI.AudDispOpen == 5){
                if(AudDisp800.isVisible()){
                    if(isFullscreen == false){
                         AudDisp800.dispose();
                         AudDisp800.setExtendedState(JFrame.MAXIMIZED_BOTH);
                         AudDisp800.setUndecorated(true);
                         AudDisp800.setResizable(false);
                         AudDisp800.setVisible(true);
                         isFullscreen = true;
                         SettingsUI.toggleFullscreen.setEnabled(true);
                    }else{
                        AudDisp800.dispose();
                        AudDisp800.setUndecorated(false);
                        AudDisp800.setResizable(true);
                        AudDisp800.setVisible(true);
                        SettingsUI.toggleFullscreen.setEnabled(true);
                        isFullscreen = false;
                    }         
                 }
            }else if(SettingsUI.AudDispOpen == 2){
                if(AudDisp720.isVisible()){
                    if(isFullscreen == false){
                         AudDisp720.dispose();
                         AudDisp720.setExtendedState(JFrame.MAXIMIZED_BOTH);
                         AudDisp720.setUndecorated(true);
                         AudDisp720.setResizable(false);
                         AudDisp720.setVisible(true);
                         isFullscreen = true;
                         SettingsUI.toggleFullscreen.setEnabled(true);
                    }else{
                        AudDisp720.dispose();
                        AudDisp720.setUndecorated(false);
                        AudDisp720.setResizable(true);
                        AudDisp720.setVisible(true);
                        SettingsUI.toggleFullscreen.setEnabled(true);
                        isFullscreen = false;
                    }         
                }
            }
       }
    }//GEN-LAST:event_toggleFullscreenActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        AudDispOpen = jComboBox1.getSelectedIndex();
    }//GEN-LAST:event_jComboBox1ActionPerformed
 
    
public static int getSelectedControllerNameRedCen(){
    return RedCenControlSelect.getSelectedIndex();
}
    
public static int getSelectedControllerNameBlueCen(){
    return BlueCenControlSelect.getSelectedIndex();
    }
    
public static int getSelectedControllerNameRedCor(){
    return RedCorControlSelect.getSelectedIndex();
    }
    
public static int getSelectedControllerNameBlueCor(){
    return BlueCorControlSelect.getSelectedIndex();
    }
    
public static int getSelectedControllerNameTimer(){
    return TimerControlSelect.getSelectedIndex();
    }
    public static void addControllerName(String controllerName){
        RedCenControlSelect.addItem(controllerName);
        BlueCenControlSelect.addItem(controllerName);
        RedCorControlSelect.addItem(controllerName);
        BlueCorControlSelect.addItem(controllerName);
        TimerControlSelect.addItem(controllerName);
    }
    
    public static void NoControllerName(){
        RedCenControlSelect.addItem("No Controllers Found");
        BlueCenControlSelect.addItem("No Controllers Found");
        RedCorControlSelect.addItem("No Controllers Found");
        BlueCorControlSelect.addItem("No Controllers Found");
        TimerControlSelect.addItem("No Controllers Found");
    }

//    public void showControllerDisconnected(){
//        RedCenControlSelect.addItem("Controller disconnected!");
//        RedCenControlSelect.addItem("Controller disconnected!");
//    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SettingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SettingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SettingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SettingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SettingsUI().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BCenVor;
    private javax.swing.JLabel BCorVor;
    private javax.swing.JCheckBox BlueCenContButton;
    private javax.swing.JCheckBox BlueCenContLeft;
    private javax.swing.JCheckBox BlueCenContRight;
    public static javax.swing.JComboBox BlueCenControlSelect;
    private javax.swing.JCheckBox BlueCorContButton;
    private javax.swing.JCheckBox BlueCorContLeft;
    private javax.swing.JCheckBox BlueCorContRight;
    public static javax.swing.JComboBox BlueCorControlSelect;
    private javax.swing.JLabel CenVor;
    private javax.swing.JLabel CorVor;
    private javax.swing.JCheckBox Mode;
    private javax.swing.JButton RePullJS;
    private javax.swing.JCheckBox RedCenContButton;
    private javax.swing.JCheckBox RedCenContLeft;
    private javax.swing.JCheckBox RedCenContRight;
    public static javax.swing.JComboBox RedCenControlSelect;
    private javax.swing.JCheckBox RedCorContButton;
    private javax.swing.JCheckBox RedCorContLeft;
    private javax.swing.JCheckBox RedCorContRight;
    public static javax.swing.JComboBox RedCorControlSelect;
    private javax.swing.JButton Save;
    public static javax.swing.JComboBox TimerControlSelect;
    private javax.swing.JPanel blue;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel red;
    public static javax.swing.JButton toggleFullscreen;
    // End of variables declaration//GEN-END:variables
}